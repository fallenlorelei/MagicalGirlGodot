[gd_scene load_steps=19 format=2]

[ext_resource path="res://assets/ui/Wenrexa_DarkTemplar_Cell.png" type="Texture" id=1]
[ext_resource path="res://ui/SkillBar.gd" type="Script" id=2]
[ext_resource path="res://ui/SkillbarButtons.gd" type="Script" id=3]

[sub_resource type="InputEventAction" id=1]
action = "ability1"

[sub_resource type="ShortCut" id=2]
shortcut = SubResource( 1 )

[sub_resource type="InputEventAction" id=3]
action = "ability2"

[sub_resource type="ShortCut" id=4]
shortcut = SubResource( 3 )

[sub_resource type="InputEventAction" id=5]
action = "ability3"

[sub_resource type="ShortCut" id=6]
shortcut = SubResource( 5 )

[sub_resource type="InputEventAction" id=7]
action = "ability4"

[sub_resource type="ShortCut" id=8]
shortcut = SubResource( 7 )

[sub_resource type="GDScript" id=9]
script/source = "extends TextureButton

onready var tooltip = preload(\"res://ui/Tooltip.tscn\")


func _ready():
	pass

func get_drag_data(_pos):
	var skill_slot = get_parent().get_name()
	var skill_name = get_owner().loaded_skills[skill_slot]
	print(\"dragging \", skill_slot, \": \", skill_name)
	if skill_name != null:
		var data = {}
		data[\"origin_node\"] = self
		data[\"origin_texture\"] = texture_normal
		data[\"origin_skill_name\"] = skill_name
		data[\"origin_skill_slot\"] = skill_slot
		
		# Dragging texture
		var drag_texture = TextureRect.new()
		drag_texture.expand = true
		drag_texture.texture = texture_normal
		drag_texture.rect_size = Vector2(50,50)
		
		# Making a \"control node\" to trick the texture to being center on the cursor
		var control = Control.new()
		control.add_child(drag_texture)
		drag_texture.rect_position = -0.5 * drag_texture.rect_size
		
		set_drag_preview(control)
		
		return data
	
func can_drop_data(_pos, data):
	var target_skill_slot_scene = get_parent()
	if target_skill_slot_scene.is_in_group(\"DraggableSkill\"):
		
		var target_skill_slot = get_parent().get_name()
		var target_skill_name = get_owner().loaded_skills[target_skill_slot]

		if get_owner().loaded_skills[target_skill_slot] == null:
			data[\"target_texture\"] = null
			data[\"target_skill_name\"] = null
			data[\"target_skill_slot\"] = null
			
		else:
			data[\"target_texture\"] = texture_normal
			data[\"target_skill_name\"] = target_skill_name
			data[\"target_skill_slot\"] = target_skill_slot
			
		
		return true
	else:
		return false
	
func drop_data(_pos, data):
	if has_node(\"Tooltip\") and get_node(\"Tooltip\").valid:
		get_node(\"Tooltip\").free()
		
	var target_skill_slot = get_parent().get_name()
	var origin_skill_slot = data[\"origin_node\"].get_parent().get_name()
	
	#Update data of origin
	get_owner().loaded_skills[origin_skill_slot] = data[\"target_skill_name\"]
	
	#Update texture of orign
	if data[\"target_skill_name\"] == null:
		data[\"origin_node\"].texture_normal = null
	else:
		data[\"origin_node\"].texture_normal = data[\"target_texture\"]
		
	#Update both data and texture of target
	get_owner().loaded_skills[target_skill_slot] = data[\"origin_skill_name\"]
	texture_normal = data[\"origin_texture\"]
	

func _on_TextureButton_mouse_entered():
	var tooltip_instance = tooltip.instance()
	var skill_slot = get_parent().get_name()
	var skill_name = get_owner().loaded_skills[skill_slot]
	tooltip_instance.origin = \"Skillbar\"
	tooltip_instance.skillslot = skill_slot
	tooltip_instance.skill_name = skill_name
	
	tooltip_instance.rect_position = get_parent().get_global_transform_with_canvas().origin - Vector2(40,80)

	add_child(tooltip_instance)
	yield(get_tree().create_timer(0.35), \"timeout\")
	if has_node(\"Tooltip\") and get_node(\"Tooltip\").valid:
		get_node(\"Tooltip\").show()

func _on_TextureButton_mouse_exited():
	if has_node(\"Tooltip\") and get_node(\"Tooltip\").valid:
		get_node(\"Tooltip\").free()
"

[sub_resource type="InputEventAction" id=10]
action = "ability5"

[sub_resource type="ShortCut" id=11]
shortcut = SubResource( 10 )

[sub_resource type="GDScript" id=12]
script/source = "extends TextureButton

onready var tooltip = preload(\"res://ui/Tooltip.tscn\")


func _ready():
	pass

func get_drag_data(_pos):
	var skill_slot = get_parent().get_name()
	var skill_name = get_owner().loaded_skills[skill_slot]
	print(\"dragging \", skill_slot, \": \", skill_name)
	if skill_name != null:
		var data = {}
		data[\"origin_node\"] = self
		data[\"origin_texture\"] = texture_normal
		data[\"origin_skill_name\"] = skill_name
		data[\"origin_skill_slot\"] = skill_slot
		
		# Dragging texture
		var drag_texture = TextureRect.new()
		drag_texture.expand = true
		drag_texture.texture = texture_normal
		drag_texture.rect_size = Vector2(50,50)
		
		# Making a \"control node\" to trick the texture to being center on the cursor
		var control = Control.new()
		control.add_child(drag_texture)
		drag_texture.rect_position = -0.5 * drag_texture.rect_size
		
		set_drag_preview(control)
		
		return data
	
func can_drop_data(_pos, data):
	var target_skill_slot_scene = get_parent()
	if target_skill_slot_scene.is_in_group(\"DraggableSkill\"):
		
		var target_skill_slot = get_parent().get_name()
		var target_skill_name = get_owner().loaded_skills[target_skill_slot]

		if get_owner().loaded_skills[target_skill_slot] == null:
			data[\"target_texture\"] = null
			data[\"target_skill_name\"] = null
			data[\"target_skill_slot\"] = null
			
		else:
			data[\"target_texture\"] = texture_normal
			data[\"target_skill_name\"] = target_skill_name
			data[\"target_skill_slot\"] = target_skill_slot
			
		
		return true
	else:
		return false
	
func drop_data(_pos, data):
	if has_node(\"Tooltip\") and get_node(\"Tooltip\").valid:
		get_node(\"Tooltip\").free()
		
	var target_skill_slot = get_parent().get_name()
	var origin_skill_slot = data[\"origin_node\"].get_parent().get_name()
	
	#Update data of origin
	get_owner().loaded_skills[origin_skill_slot] = data[\"target_skill_name\"]
	
	#Update texture of orign
	if data[\"target_skill_name\"] == null:
		data[\"origin_node\"].texture_normal = null
	else:
		data[\"origin_node\"].texture_normal = data[\"target_texture\"]
		
	#Update both data and texture of target
	get_owner().loaded_skills[target_skill_slot] = data[\"origin_skill_name\"]
	texture_normal = data[\"origin_texture\"]
	

func _on_TextureButton_mouse_entered():
	var tooltip_instance = tooltip.instance()
	var skill_slot = get_parent().get_name()
	var skill_name = get_owner().loaded_skills[skill_slot]
	tooltip_instance.origin = \"Skillbar\"
	tooltip_instance.skillslot = skill_slot
	tooltip_instance.skill_name = skill_name
	
	tooltip_instance.rect_position = get_parent().get_global_transform_with_canvas().origin - Vector2(40,80)

	add_child(tooltip_instance)
	yield(get_tree().create_timer(0.35), \"timeout\")
	if has_node(\"Tooltip\") and get_node(\"Tooltip\").valid:
		get_node(\"Tooltip\").show()

func _on_TextureButton_mouse_exited():
	if has_node(\"Tooltip\") and get_node(\"Tooltip\").valid:
		get_node(\"Tooltip\").free()
"

[sub_resource type="InputEventAction" id=13]
action = "ability6"

[sub_resource type="ShortCut" id=14]
shortcut = SubResource( 13 )

[sub_resource type="GDScript" id=15]
script/source = "extends TextureButton

onready var tooltip = preload(\"res://ui/Tooltip.tscn\")


func _ready():
	pass

func get_drag_data(_pos):
	var skill_slot = get_parent().get_name()
	var skill_name = get_owner().loaded_skills[skill_slot]
	print(\"dragging \", skill_slot, \": \", skill_name)
	if skill_name != null:
		var data = {}
		data[\"origin_node\"] = self
		data[\"origin_texture\"] = texture_normal
		data[\"origin_skill_name\"] = skill_name
		data[\"origin_skill_slot\"] = skill_slot
		
		# Dragging texture
		var drag_texture = TextureRect.new()
		drag_texture.expand = true
		drag_texture.texture = texture_normal
		drag_texture.rect_size = Vector2(50,50)
		
		# Making a \"control node\" to trick the texture to being center on the cursor
		var control = Control.new()
		control.add_child(drag_texture)
		drag_texture.rect_position = -0.5 * drag_texture.rect_size
		
		set_drag_preview(control)
		
		return data
	
func can_drop_data(_pos, data):
	var target_skill_slot_scene = get_parent()
	if target_skill_slot_scene.is_in_group(\"DraggableSkill\"):
		
		var target_skill_slot = get_parent().get_name()
		var target_skill_name = get_owner().loaded_skills[target_skill_slot]

		if get_owner().loaded_skills[target_skill_slot] == null:
			data[\"target_texture\"] = null
			data[\"target_skill_name\"] = null
			data[\"target_skill_slot\"] = null
			
		else:
			data[\"target_texture\"] = texture_normal
			data[\"target_skill_name\"] = target_skill_name
			data[\"target_skill_slot\"] = target_skill_slot
			
		
		return true
	else:
		return false
	
func drop_data(_pos, data):
	if has_node(\"Tooltip\") and get_node(\"Tooltip\").valid:
		get_node(\"Tooltip\").free()
		
	var target_skill_slot = get_parent().get_name()
	var origin_skill_slot = data[\"origin_node\"].get_parent().get_name()
	
	#Update data of origin
	get_owner().loaded_skills[origin_skill_slot] = data[\"target_skill_name\"]
	
	#Update texture of orign
	if data[\"target_skill_name\"] == null:
		data[\"origin_node\"].texture_normal = null
	else:
		data[\"origin_node\"].texture_normal = data[\"target_texture\"]
		
	#Update both data and texture of target
	get_owner().loaded_skills[target_skill_slot] = data[\"origin_skill_name\"]
	texture_normal = data[\"origin_texture\"]
	

func _on_TextureButton_mouse_entered():
	var tooltip_instance = tooltip.instance()
	var skill_slot = get_parent().get_name()
	var skill_name = get_owner().loaded_skills[skill_slot]
	tooltip_instance.origin = \"Skillbar\"
	tooltip_instance.skillslot = skill_slot
	tooltip_instance.skill_name = skill_name
	
	tooltip_instance.rect_position = get_parent().get_global_transform_with_canvas().origin - Vector2(40,80)

	add_child(tooltip_instance)
	yield(get_tree().create_timer(0.35), \"timeout\")
	if has_node(\"Tooltip\") and get_node(\"Tooltip\").valid:
		get_node(\"Tooltip\").show()

func _on_TextureButton_mouse_exited():
	if has_node(\"Tooltip\") and get_node(\"Tooltip\").valid:
		get_node(\"Tooltip\").free()
"

[node name="SkillBar" type="Control"]
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
margin_left = -20.0
margin_top = -40.0
margin_right = 20.0
script = ExtResource( 2 )

[node name="Background" type="ColorRect" parent="."]
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
margin_left = -109.0
margin_top = -39.0
margin_right = 109.0
grow_horizontal = 2
grow_vertical = 0
color = Color( 0.203922, 0.203922, 0.203922, 1 )

[node name="HBoxContainer" type="HBoxContainer" parent="Background"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 10.0
margin_top = 5.0
margin_right = -10.0
margin_bottom = -15.0

[node name="Skill1" type="TextureRect" parent="Background/HBoxContainer" groups=["DraggableSkill"]]
margin_right = 30.0
margin_bottom = 30.0
rect_min_size = Vector2( 30, 30 )
size_flags_vertical = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 5

[node name="TextureButton" type="TextureButton" parent="Background/HBoxContainer/Skill1" groups=["AbilityShortcut"]]
anchor_right = 1.0
anchor_bottom = 1.0
shortcut_in_tooltip = false
action_mode = 0
button_mask = 0
shortcut = SubResource( 2 )
expand = true
script = ExtResource( 3 )

[node name="Label" type="Label" parent="Background/HBoxContainer/Skill1"]
margin_right = 40.0
margin_bottom = 14.0
text = "1"

[node name="Skill2" type="TextureRect" parent="Background/HBoxContainer" groups=["DraggableSkill"]]
margin_left = 34.0
margin_right = 64.0
margin_bottom = 30.0
rect_min_size = Vector2( 30, 30 )
size_flags_vertical = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 5

[node name="TextureButton" type="TextureButton" parent="Background/HBoxContainer/Skill2" groups=["AbilityShortcut"]]
anchor_right = 1.0
anchor_bottom = 1.0
shortcut_in_tooltip = false
action_mode = 0
button_mask = 0
shortcut = SubResource( 4 )
expand = true
script = ExtResource( 3 )

[node name="Label" type="Label" parent="Background/HBoxContainer/Skill2"]
margin_right = 40.0
margin_bottom = 14.0
text = "2"

[node name="Skill3" type="TextureRect" parent="Background/HBoxContainer" groups=["DraggableSkill"]]
margin_left = 68.0
margin_right = 98.0
margin_bottom = 30.0
rect_min_size = Vector2( 30, 30 )
size_flags_vertical = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 5

[node name="TextureButton" type="TextureButton" parent="Background/HBoxContainer/Skill3" groups=["AbilityShortcut"]]
anchor_right = 1.0
anchor_bottom = 1.0
shortcut_in_tooltip = false
action_mode = 0
button_mask = 0
shortcut = SubResource( 6 )
expand = true
script = ExtResource( 3 )

[node name="Label" type="Label" parent="Background/HBoxContainer/Skill3"]
margin_right = 40.0
margin_bottom = 14.0
text = "3"

[node name="Skill4" type="TextureRect" parent="Background/HBoxContainer" groups=["DraggableSkill"]]
margin_left = 102.0
margin_right = 132.0
margin_bottom = 30.0
rect_min_size = Vector2( 30, 30 )
size_flags_vertical = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 5

[node name="TextureButton" type="TextureButton" parent="Background/HBoxContainer/Skill4" groups=["AbilityShortcut"]]
anchor_right = 1.0
anchor_bottom = 1.0
shortcut_in_tooltip = false
action_mode = 0
button_mask = 0
shortcut = SubResource( 8 )
expand = true
script = SubResource( 9 )

[node name="Label" type="Label" parent="Background/HBoxContainer/Skill4"]
margin_right = 40.0
margin_bottom = 14.0
text = "4"

[node name="Skill5" type="TextureRect" parent="Background/HBoxContainer" groups=["DraggableSkill"]]
margin_left = 136.0
margin_right = 166.0
margin_bottom = 30.0
rect_min_size = Vector2( 30, 30 )
size_flags_vertical = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 5

[node name="TextureButton" type="TextureButton" parent="Background/HBoxContainer/Skill5" groups=["AbilityShortcut"]]
anchor_right = 1.0
anchor_bottom = 1.0
shortcut_in_tooltip = false
action_mode = 0
button_mask = 0
shortcut = SubResource( 11 )
expand = true
script = SubResource( 12 )

[node name="Label" type="Label" parent="Background/HBoxContainer/Skill5"]
margin_right = 40.0
margin_bottom = 14.0
text = "5"

[node name="Skill6" type="TextureRect" parent="Background/HBoxContainer" groups=["DraggableSkill"]]
margin_left = 170.0
margin_right = 200.0
margin_bottom = 30.0
rect_min_size = Vector2( 30, 30 )
size_flags_vertical = 5
texture = ExtResource( 1 )
expand = true
stretch_mode = 5

[node name="TextureButton" type="TextureButton" parent="Background/HBoxContainer/Skill6" groups=["AbilityShortcut"]]
anchor_right = 1.0
anchor_bottom = 1.0
shortcut_in_tooltip = false
action_mode = 0
button_mask = 0
shortcut = SubResource( 14 )
expand = true
script = SubResource( 15 )

[node name="Label" type="Label" parent="Background/HBoxContainer/Skill6"]
margin_right = 40.0
margin_bottom = 14.0
text = "6"

[connection signal="mouse_entered" from="Background/HBoxContainer/Skill1/TextureButton" to="." method="_on_TextureButton_mouse_entered"]
[connection signal="mouse_entered" from="Background/HBoxContainer/Skill1/TextureButton" to="Background/HBoxContainer/Skill1/TextureButton" method="_on_TextureButton_mouse_entered"]
[connection signal="mouse_exited" from="Background/HBoxContainer/Skill1/TextureButton" to="." method="_on_TextureButton_mouse_exited"]
[connection signal="mouse_exited" from="Background/HBoxContainer/Skill1/TextureButton" to="Background/HBoxContainer/Skill1/TextureButton" method="_on_TextureButton_mouse_exited"]
[connection signal="mouse_entered" from="Background/HBoxContainer/Skill2/TextureButton" to="." method="_on_TextureButton_mouse_entered"]
[connection signal="mouse_entered" from="Background/HBoxContainer/Skill2/TextureButton" to="Background/HBoxContainer/Skill2/TextureButton" method="_on_TextureButton_mouse_entered"]
[connection signal="mouse_exited" from="Background/HBoxContainer/Skill2/TextureButton" to="." method="_on_TextureButton_mouse_exited"]
[connection signal="mouse_exited" from="Background/HBoxContainer/Skill2/TextureButton" to="Background/HBoxContainer/Skill2/TextureButton" method="_on_TextureButton_mouse_exited"]
[connection signal="mouse_entered" from="Background/HBoxContainer/Skill3/TextureButton" to="." method="_on_TextureButton_mouse_entered"]
[connection signal="mouse_entered" from="Background/HBoxContainer/Skill3/TextureButton" to="Background/HBoxContainer/Skill3/TextureButton" method="_on_TextureButton_mouse_entered"]
[connection signal="mouse_exited" from="Background/HBoxContainer/Skill3/TextureButton" to="." method="_on_TextureButton_mouse_exited"]
[connection signal="mouse_exited" from="Background/HBoxContainer/Skill3/TextureButton" to="Background/HBoxContainer/Skill3/TextureButton" method="_on_TextureButton_mouse_exited"]
[connection signal="mouse_entered" from="Background/HBoxContainer/Skill4/TextureButton" to="." method="_on_TextureButton_mouse_entered"]
[connection signal="mouse_entered" from="Background/HBoxContainer/Skill4/TextureButton" to="Background/HBoxContainer/Skill4/TextureButton" method="_on_TextureButton_mouse_entered"]
[connection signal="mouse_exited" from="Background/HBoxContainer/Skill4/TextureButton" to="." method="_on_TextureButton_mouse_exited"]
[connection signal="mouse_exited" from="Background/HBoxContainer/Skill4/TextureButton" to="Background/HBoxContainer/Skill4/TextureButton" method="_on_TextureButton_mouse_exited"]
[connection signal="mouse_entered" from="Background/HBoxContainer/Skill5/TextureButton" to="." method="_on_TextureButton_mouse_entered"]
[connection signal="mouse_entered" from="Background/HBoxContainer/Skill5/TextureButton" to="Background/HBoxContainer/Skill5/TextureButton" method="_on_TextureButton_mouse_entered"]
[connection signal="mouse_exited" from="Background/HBoxContainer/Skill5/TextureButton" to="." method="_on_TextureButton_mouse_exited"]
[connection signal="mouse_exited" from="Background/HBoxContainer/Skill5/TextureButton" to="Background/HBoxContainer/Skill5/TextureButton" method="_on_TextureButton_mouse_exited"]
[connection signal="mouse_entered" from="Background/HBoxContainer/Skill6/TextureButton" to="." method="_on_TextureButton_mouse_entered"]
[connection signal="mouse_entered" from="Background/HBoxContainer/Skill6/TextureButton" to="Background/HBoxContainer/Skill6/TextureButton" method="_on_TextureButton_mouse_entered"]
[connection signal="mouse_exited" from="Background/HBoxContainer/Skill6/TextureButton" to="." method="_on_TextureButton_mouse_exited"]
[connection signal="mouse_exited" from="Background/HBoxContainer/Skill6/TextureButton" to="Background/HBoxContainer/Skill6/TextureButton" method="_on_TextureButton_mouse_exited"]
